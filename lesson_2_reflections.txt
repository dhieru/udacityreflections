What happens when you initialize a repository? Why do you need to do it?
Git init is used to start using the git on a projects that is not under git.
It starts tracking the files, when they were changed, are they commited.

We need to do this so as to use the benefits of git and git tracking,
that all the developers at same/different locations can now collaborate.


How is the staging area different from the working directory and the repository? 
What value do you think it offers?
When you commit it's only going to commit the changes in the index 
(the "staged" files). 
There are many uses for this, 
but the most obvious is to break up your working changes into smaller, 
self-contained pieces. 
Perhaps you fixed a bug while you were implementing a feature. 
You can git add just that file (or git add -p to add just part of a file!) 
and then commit that bugfix before committing everything 
If you are using git commit -a then you are just forcing 
an add of everything right before the commit. 
Don't use -a if you want to take advantage of staging files.

You can also treat the staged files as an intermediate
 working copy with the --cached to many commands. 
For example, git diff --cached will show you how the stage differs from 
HEAD so you can see what you're about to commit without mixing in your 
other working changes

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
I like to use master as a stable version of my code and create a new branch
    when I'm planning on working on something experimental, or that will be
    non-stable for a little while.  That makes it easier to switch back to the
    stable version whenever I need to.  This is particularly helpful when I am
    working with other developers, since the other developers can trust that
    master is stable.  They can always check out my branch if they are
    interested in my experimental changes.

    When I'm working on my own, and I make a change that I do not expect to
    break anything, I frequently don't bother to make another branch.  However,
    making a new branch in Git is so fast and easy that there is really no bad
    time to make a branch, unless I make so many that I cannot keep track of
    them all.

How do the diagrams help you visualize the branch structure?
The diagrams show what the parent of each commit is.  When there are
    multiple branches, I can use the diagrams to easily see what changes will be
    part of each branch.  They also let me easily see what commit each branch
    refers to.
